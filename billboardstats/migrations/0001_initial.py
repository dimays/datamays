# Generated by Django 4.2.13 on 2024-07-09 17:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing a unique artist', primary_key=True, serialize=False)),
                ('name', models.CharField(db_comment='Name of the artist as listed on the Billboard Hot 100', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
            ],
            options={
                'db_table': 'artists',
                'db_table_comment': 'A record for each unique artist',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing a unique Weekly Hot 100 chart', primary_key=True, serialize=False)),
                ('chart_date', models.DateField(db_comment='Release date of the chart')),
                ('start_date', models.DateField(db_comment='Start date of the period for this chart')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
            ],
            options={
                'db_table': 'charts',
                'db_table_comment': 'A record for each Weekly Hot 100 chart',
                'ordering': ['-chart_date'],
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing a unique song', primary_key=True, serialize=False)),
                ('title', models.CharField(db_comment='Title of the song', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('artist', models.ForeignKey(db_comment='Foreign key, references artists.id, represents the artist credited for this song on the Hot 100', on_delete=django.db.models.deletion.CASCADE, related_name='song_artist_ids', to='billboardstats.artist')),
            ],
            options={
                'db_table': 'songs',
                'db_table_comment': 'A record for each unique song',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SongStats',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing the current stats for each song', primary_key=True, serialize=False)),
                ('peak_position', models.IntegerField(db_comment='Represents the peak position of this song from any given week')),
                ('entry_position', models.IntegerField(db_comment='Represents the earliest position of this song from any given week')),
                ('final_position', models.IntegerField(db_comment='Represents the most recent position of this song from any given week')),
                ('num_weeks_at_one', models.IntegerField(db_comment='Represents the distinct number of weeks this song was at #1')),
                ('num_weeks_on_chart', models.IntegerField(db_comment='Represents the distinct number of weeks this song appeared on the Hot 100 Charts')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('song', models.ForeignKey(db_comment='Foreign key, references songs.id, represents the song', on_delete=django.db.models.deletion.PROTECT, related_name='song_stats_song_ids', to='billboardstats.song')),
            ],
            options={
                'db_table': 'song_stats',
                'db_table_comment': 'A record for each song, with fields representing various overall stats',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ChartSong',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing a unique song on each Weekly Hot 100 chart', primary_key=True, serialize=False)),
                ('position', models.SmallIntegerField(db_comment='Represents the position of this song on this weekly chart')),
                ('last_week_position', models.SmallIntegerField(blank=True, db_comment='The position of this song on the previous weekly chart (NULL if new song this week)', default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('chart', models.ForeignKey(db_comment='Foreign key, references charts.id, represents the chart this song appears on', on_delete=django.db.models.deletion.PROTECT, related_name='chart_song_chart_ids', to='billboardstats.chart')),
                ('song', models.ForeignKey(db_comment='Foreign key, references songs.id, represents the song', on_delete=django.db.models.deletion.PROTECT, related_name='chart_song_song_ids', to='billboardstats.song')),
            ],
            options={
                'db_table': 'chart_songs',
                'db_table_comment': 'A record for each song on each Weekly Hot 100 chart',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ChartArtist',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing a unique artist on each Weekly Hot 100 chart', primary_key=True, serialize=False)),
                ('peak_position', models.IntegerField(db_comment='Represents the peak position of this artist on this weekly chart')),
                ('num_songs_on_chart', models.IntegerField(db_comment='Represents the number of songs this artist had on this weekly chart')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('artist', models.ForeignKey(db_comment='Foreign key, references artists.id, represents the artist', on_delete=django.db.models.deletion.PROTECT, related_name='chart_artist_artist_ids', to='billboardstats.artist')),
                ('chart', models.ForeignKey(db_comment='Foreign key, references charts.id, represents the chart this song appears on', on_delete=django.db.models.deletion.PROTECT, related_name='chart_artist_chart_ids', to='billboardstats.chart')),
            ],
            options={
                'db_table': 'chart_artists',
                'db_table_comment': 'A record for each song on each Weekly Hot 100 chart',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ArtistStats',
            fields=[
                ('id', models.BigAutoField(db_comment='Primary key representing the current stats for each artist', primary_key=True, serialize=False)),
                ('peak_position', models.IntegerField(db_comment='Represents the peak position of this artist from any given week')),
                ('num_songs_at_one', models.IntegerField(db_comment='Represents the distinct count of #1 songs this artist has ever had')),
                ('num_songs_on_chart', models.IntegerField(db_comment='Represents the distinct count of songs this artist has ever had on the Hot 100 Charts')),
                ('num_weeks_at_one', models.IntegerField(db_comment='Represents the distinct number of weeks this artist had a song at #1')),
                ('num_weeks_on_chart', models.IntegerField(db_comment='Represents the distinct number of weeks this artist had a song on the Hot 100 Charts')),
                ('on_chart_from', models.DateField(db_comment='Represents the first date this artist appeared on the Hot 100 Charts')),
                ('on_chart_to', models.DateField(db_comment='Represents the most recent date this artist appeared on the Hot 100 Charts')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('artist', models.ForeignKey(db_comment='Foreign key, references artists.id, represents the song', on_delete=django.db.models.deletion.PROTECT, related_name='artist_stats_artist_ids', to='billboardstats.artist')),
            ],
            options={
                'db_table': 'artist_stats',
                'db_table_comment': 'A record for each artist, with fields representing various overall stats',
                'ordering': ['id'],
            },
        ),
    ]
